[
{"content": "1、定义,何谓数据异构，上周交易部门商品的同事过来做分享，又看到这个词，他的PPT里面是 数据库异构。其实我们以前做的事情，也是可以成为数据异构。比如我们将DB里面的数据持久化到REDIS里面去，就是一种数据异构的方式。如果要下个定义的话：分库分表中有一个最为常见的场景，为了提升数据库的查询能力，我们都会对数据库做分库分表操作。比如订单库，开始的时候我们是按照订单ID维度去分库分表，那么后来的业务需求想按照商家维度去查询，比如我想查询某一个商家下的所有订单，就非常麻烦。这个时候通过数据异构就能很好的解决此问题，比如下图异构维度几种异构方式在日常业务开发中大致可以分为以上几种数据去向，DB-DB这种方式，一般常见于分库分表后，聚合查询的时候，比如我们按照订单ID去分库分表，那么这个时候我们要按照用户ID去查询，查询这个用户下面的订单就非常不方便了，当然可以使用统一加到内存中去，但这样不太好。所以我们就可以用数据库异构的方式，重新按照用户ID的维度来分一个表，像在上面常见应用场景中介绍的那样。把数据异构到redis、elasticserach、slor中去要解决的问题跟按照多维度来查询的需求差不多。这些存储天生都有聚合的功能。当然同时也可以提高查询性能，应对大访问量，比如redis这种抗量银弹。这个很简单就是将数据库A，全部拷贝一份到数据库B，这样的使用场景是离线统计跑任务脚本的时候可以。缺点也很突出，不适用于持续增长的数据。这个是业务场景比较简单的时候，理想情况下数据不会发生改变，比如日志数据，这个时候可以去标记，比如时间戳，这样当发生故障的时候还可以回溯到上一次同步点，开始重新同步数据。通过实时的订阅mysql的binlog日志，消费到这些日志后，重新构建数据结构插入一个新的数据库或者是其他存储比如es、slor等等。订阅binlog日志可以比较好的能保证数据的一致性。业务数据写入DB的同时，也发送MQ一份，也就是业务里面实现双写。这种方式比较简单，但也很难保证数据一致性，对简单的业务场景可以采用这种方式。canal异构方式binglog是数据的日志记录方式，每次对数据的操作都会有binlog日志。现在开源的订阅binlog日志的组件，比如使用比较广泛的canal，它是阿里开源的基于mysql数据库binlog的增量订阅和消费组件。由于cannal服务器目前读取的binlog事件只保存在内存中，并且只有一个canal客户端可以进行消费。所以如果需要多个消费客户端，可以引入activemq或者kafka。如上图绿色虚线框部分。我们还需要确保全量对比来保证数据的一致性（canal+mq的重试机制基本可以保证写入异构库之后的数据一致性），这个时候可以有一个全量同步WORKER程序来保证，如上图深绿色部分。先来看下mysql主备（主从）复制原理如下图，在此原理基础之上我们再来理解canal的实现原理就一眼能明白了。mysql主备复制实现原理MQ异构方式mq的方式，就相对简单，实际上是在业务逻辑中写DB的同时去写一次MQ，但是这种方式不能够保证数据一致性，就是不能保证跨资源的事务。本文主要叙述了数据异构的使用场景，方法。这里面涉及到的activemq以及canal并没有深入分析，关于这块的内容可以直接参考相关具体文档，文中已给了链接地址。根据数据异构的定义，将数据异地构建存储，我们可以应用的地方就非常多，文中说的分库分表之后按照其它维度来查询的时候，我们想脱离DB直接用缓存比如redis来抗量的时候。数据异构这种方式都能够很好的帮助我们来解决诸如此类的问题。\n\n参考资料：", "title": "数据异构的武器-BINLOG+MQ", "create_date": "\r\n\r\n            2017/09/12 ·  ", "tag": "IT技术.数据库"},
{"content": "a. REPLACE 原理,公司开发人员在更新数据时使用了 replace into 语句，由于使用不当导致了数据的大量丢失，到底是如何导致的数据丢失？现分析如下。REPLACE INTO 原理的官方解释为：地址：https://dev.mysql.com/doc/refman/5.6/en/replace.html丢失数据的表结构如下：执行的replace语句如下（多条）：通过查询binlog找到执行记录，部分如下：接下来我进行了如下测试：数据丢失或数据错误后，可以有如下几种方式恢复：通过上述分析可以发现， 会删除旧行并插入新行，但是binlog中是以update形式记录，这样就带来另一个问题：这个问题在平时不会有丝毫影响，但是：http://www.cnblogs.com/monian/archive/2014/10/09/4013784.html", "title": "MySQL 进行 Replace 操作时造成数据丢失——那些坑你踩了吗？", "create_date": "\r\n\r\n            2017/09/05 ·  ", "tag": "IT技术.MySQL.数据库"},
{"content": "任务：难度等级：高。关于这个任务/主题，之前网上已有许多人分享了他们对这种“讲座”的想法，你可以在 Stack Overflow 上找到一些非常有趣的例子（例如）。其中许多人的想法是关于，因为要取得成功，你需要非常准确地告诉它做事的方法和规律。我保证这样很有趣，但我也很怀疑，过后孩子们能对编程有什么了解。一个成功的演讲在我心里应该是这样的：我从一个最基本的问题开始，“”我知道他们昨天讨论过这个问题，所以对他们提出的一些想法，我并不感到惊讶。我给了他们我自己的定义：“程序员是编写计算机程序的人，他们掌握和计算机交流的语言，而且对计算机懂得很多。“然后我画了一个工作中的程序员。下一步是讨论。所有的孩子都开始谈论他们父母的笔记本（他们反复提到同样的东西，这样真的很可爱）。讨论了一段时间后，我打断他们并指出，，比如智能手机或手表，还包括汽车和电梯。我把上面提到的每一项都画了出来，并用几个字简单地概述每一种情况下计算机的用途。我还问他们他们如何看待天气预报的工作（这时一个聪明的孩子回答：“卫星知道第二天的天气”），并告诉他们计算机得出的预测，基于上千的测量设备给出的测量结果。为了转到下一个话题，我提到计算机之所以能做很多事，要归功于指导它们做这些事情的程序。话题随之转向 YouTube，我知道他们很了解它，我从他们熟悉的 UI 开始。我问他们 YouTube 上有多少部电影。有些人比较困惑，而有些人高喊“数百万”或“无限”。我问所有的电影是否都可以放在一张光盘上。然后我画出许多光盘，问他们“在给 YouTube 下达观看 《粉红猪小妹》某一集的指令后，你了解它是如何找到那个正确的光盘吗？”他们以沉默回应，所以我画了一个数据库，并快速描述了它的作用。我想让他们知道，他们所看到的只是冰山一角，。我解释了我们必须如何处理以下各种事情：这是一个提醒他们的好时机。这些项目很大，需要不同领域的知识，所以很多人都参与了创作。在这一点上，我更新了第一张图，添加了另一个程序员，让他们俩坐得很近。下一个主题是，当然我一笔带过，没有详细展开。我是这样告诉他们的：我把注意力集中在处理器上，告诉他们计算机使用。当我假装只用 A 和 B 开头的词说话时，我们获得了一点乐趣。然后我解释程序员之所以使用编程语言，是为了更容易与处理器沟通对话。然后我使用了一些最简单的（使用一些伪代码）。我本想再给他们看一些东西，但我觉得他们正在失去注意力，所以我甚至没有提出 for 循环。为了完成我的演讲，我再次画出了我们所谈论过的符号。我一个一个地画出来，问他们“这是什么？”、“你还记得什么？”这样的问题。整个过程都非常棒。额外的说明、注意事项、提示及技巧：", "title": "如何向 6 岁的孩子解释何为编程", "create_date": "\r\n\r\n            2017/09/07 ·  ", "tag": "趣文小说. 2 评论 .儿童.编程.趣文"},
{"content": "100:10:1 方法究竟是什么？,【导读】：据本文作者 Michael Fogus 博客上的简介，他是一位 Clojure 开发者和狂热用户，并且是 Clojure 的贡献者（Clojure 本身也是一个开源项目）。平常在 Clojure 和 ClojureScript 花费时间很多。他喜欢棒球、象棋、哲学、恐怖电影、阅读和写作。出过两本书《Functional JavaScript》和《The joy of Clojure》。许多年里我一直全心投入于开源运动，不过那时候我很少在空闲时写代码，在 Sourceforge、GoogleCode、GitHub 之类的代码托管平台，也找不到我的项目（repo）。然而随着时间流逝，我逐渐意识到向全球公开代码的责任，毫不夸张的说，这吸引住了我。除了很多“已发布”的代码是低水准的这一事实之外，无论与，将代码公布于众的行为意味着与某些人签订契约，这些人可以为自己的目的使用公开的代码。当然，我并不一定反对这种社会契约，相反，在发布代码的时候我最终改变了主意，以致于我在我的方法中变得更保守了。这个我现在正在使用的方法叫做“100:10:1 方法”，此术语是由开发者 Nick Bentley 创造。我不会重复赘述此方法的细节，你可以通过阅读 《》来了解。但我会试着从我的开源软件开发方法这一背景下来概括它。具体操作分三部分，步骤如下：首先，准备一本笔记本和一支笔，为开发有意思的开源项目写下 100 种想法即可。这些有关项目的想法可以涉及各种主题，深度和质量。我想过的有，野生语言的创意、已有项目的新功能、系统设计、协议、缺损文件、有趣的 forks、代码简化、游戏、原型、论文想法的实现、第二个系统等等。在使用 100:10:1 方法之前，我总是会用疯狂的想法填满我的笔记本。它们通常是东一点西一点，从不会聚集在一个地方。在几页纸上写下这 100个想法后，我的注意力立马集中在它们身上。这样我就可以好好筛选比较为第二步做准备。我面前的这 100 个想法，让我了解到我不止当时对追求它们充满兴趣，并且我感觉它们可以使我和他人同时获益。从原始的 100 个想法里，我挑出了确定想探索和专研下去的 10 个。在这 10 个项目里，我挑不出一个更好的了，因此我想同时为它们各自编写一个最小可行“项目”。你可能马上会想到同时开发 10 个项目这件事本身就是一个负担。这不能说是一个错误的评估。然而，我意识到对于我选择的大多数项目，要找到最可行的实现方式是非常难的，如果有也得耗费几个月甚至数年时间。你看，我曾一度认为发布开源软件是把潜在可用的工具给予他人的一种方法。很遗憾的是，随着时间推移，这个观点已经退化到能做到将代码公开就不错了。我现在的想法是，在业余时间写代码仅仅是一个探索，有没有结果也无所谓了。同时开发 10 个项目有个好处就是，当我在一个上遇到了瓶颈可以轻易的转移到另一个更有灵感的项目去。作为一个除编程外拥有丰富爱好、社区和家庭生活的人，用一堆选择来对抗我的三分钟热度无疑是非常有用的。拥有 10 个并行的项目意味着总有一个能让我在短时间内感兴趣。我知道当所有兴趣集中在一个任务上时，工作会变的更有效率。无论怎样最后总有一个项目会见到希望，当它到来时我已经准备好了进入最后一个阶段。在开发 10 个项目的过程中，其中一个不可避免会成为有价值的东西。万事俱备后，我会将其变为一个高质量的软件产品。这意味着要完成所有内容，确保一个健壮的系统，有可靠的例子、测试、文档、稳定的API、博客文章或演讲，甚至可能有网络。在此之前为了我自己而开发的项目，可能要经历大量的工作才能使其成为值得与他人分享的东西。这当然取决于软件本身的复杂度，很可能最后一步要花最长的时间来完成。同样最后阶段也是我最容易彻底放弃的时候。因为我发现了一个大麻烦，如果我不愿为我的代码写文档、例子和测试的话，在未来的数十年想要维护它是根本不可能的。这个方法我已经用了一段时间，在此之前，使用类似的方法同样取得了不错的成果。Zeder 和 Patagonia 也是用 100:10:1 方法或类似方法进行开发的。我现在有的一个叫 Tathata 的 Clojure 库，即将进入最后阶段。或许 10 个项目里会有一个成功，不过即使失败了，我还会再挑选更多的 10 个去尝试。我有足够的时间，准确的说是一辈子。:F感谢 Carin Meier、Rich Hickey、Justin Gehtland 和 Paul deGrandis 阅读，并为这篇文章提供修改意见。1.事实证明，我的其他爱好(游戏设计、Sabremetrics、写作等)在过去也有类似的趋势，但就像开源编码一样，它们也已经达到100:10:1的理想状态。2.不幸的是，人们似乎也倾向于将开源视为一种道德声明。3.“100:10:1 方法”这个名字来自尼克·本特利在他的一篇文章中所描述的游戏设计方法。虽然我自己对开源代码的看法已经有点类似于尼克的观点，但他的文章让我的方法有了一个名字和基本结构。无论你在哪儿，Mr. Bentley，谢谢你!4.如果我们不创建开源代码来造福他人，那又有什么意义呢？5.有时候一个项目会从根上就腐烂，在这种情况下，我会毫不犹豫的废弃它，并将其他替代品放进 100 的列表中。100 的链表是一个动态链表，所有东西可以随存随取。6.或者不一定？我担心个啥！7.当那一个已经浮出水面了，我仍然不会放弃其他 9 个，不过仅仅是在更表层，MVP 式的水平上开发。如果某个想法失败了，我还会从 100 个中挑选其他的代替。这个方法当然是没有任何硬性规定的。8.当然还有最终的名字和标志:p。9.如你所见，我将100:10:1 方法应用于其他的创造性的爱好。从编码、音乐、写作到游戏设计，它适用于任何创造性事情。", "title": "100:10:1方法 : 我是这样参与开源的", "create_date": "\r\n\r\n            2017/09/08 ·  ", "tag": "IT技术. 1 评论 .开源"},
{"content": "查看开机启动项,一般情况下，常规用途的 Linux 发行版在开机启动时拉起各种相关服务进程，包括许多你可能无需使用的服务，例如蓝牙bluetooth、Avahi、 调制解调管理器ModemManager、ppp-dns（LCTT 译注：此处作者笔误 ppp-dns 应该为 pppd-dns) 等服务进程，这些都是什么东西？用于哪里，有何功能？Systemd 提供了许多很好的工具用于查看系统启动情况，也可以控制在系统启动时运行什么。在这篇文章中，我将说明在 Systemd 类发行版中如何关闭一些令人讨厌的进程。在过去，你能很容易通过查看  了解到哪些服务进程会在引导时启动。Systemd 以不同的方式展现，你可以使用如下命令罗列允许开机启动的服务进程。在此列表顶部，对我来说，蓝牙服务是冗余项，因为在该电脑上我不需要使用蓝牙功能，故无需运行此服务。下面的命令将停止该服务进程，并且使其开机不启动。你可以通过下面命令确定是否操作成功。停用的服务进程仍然能够被另外一个服务进程启动。如果你真的想在任何情况下系统启动时都不启动该进程，无需卸载该它，只需要把它掩盖起来就可以阻止该进程在任何情况下开机启动。一旦你对禁用该进程启动而没有出现负面作用感到满意，你也可以选择卸载该程序。通过执行命令可以获得如下服务列表：你不能启用或禁用静态服务，因为静态服务被其他的进程所依赖，并不意味着它们自己运行。如何知道你需要哪些服务，而哪些又是可以安全地禁用的呢？它总是依赖于你的个性化需求。这里举例了几个服务进程的作用。许多服务进程都是发行版特定的，所以你应该看看你的发行版文档（比如通过 google 或 StackOverflow）。Systemd 提供了一些命令帮助调试系统开机启动问题。该命令会重演你的系统启动的所有消息。通过命令  可以复审前一次启动， 可以复审倒数第 2 次启动，以此类推。该命令会打印出大量的信息，你可能并不关注所有信息，只是关注其中问题相关部分。为此，系统提供了几个过滤器，用于帮助你锁定目标。让我们以进程号为 1 的进程为例，该进程是所有其它进程的父进程。这些打印消息显示了什么被启动，或者是正在尝试启动。一个最有用的命令工具之一 ，用于帮助查看哪个服务进程启动耗时最长。这个特定的例子没有出现任何异常，但是如果存在系统启动瓶颈，则该命令将能发现它。你也能通过如下资源了解 Systemd 如何工作： ", "title": "Linux 系统开机启动项清理", "create_date": "\r\n\r\n            2017/09/07 ·  ", "tag": "IT技术.Linux"},
{"content": "链接一个特定的项目,你面试的公司找你要 GitHub 链接，猎头找你要 GitHub 链接。“你参与过开源项目么？”是目前 IT 技术面试中的常见问题之一。既然他们要 GitHub，你就得给。本文将阐述如何在面试中展示你在 GitHub 上的项目。以下的建议有两个用途：应聘者可以学习怎么写软件的简介（不一定非要是GitHub）；招聘者（程序员）可以学习可以从哪些关键点来评价一个程序员的水平和软件的质量。在你的简历和每一份申请里面都放上你的GitHub链接。该链接要直链到一个项目。不要给你GitHub的主页地址，那个页面没有有用信息，很难让人继续浏览。你必须只展示一个项目。一个就够了，不需要更多。这个项目将是你的“登录页面”，是招聘者看到的第一个页面。他们很少去看其他页面（也没有这个必要）所以该页面本身就应该展示一切信息。如果他们去看了其他页面，说明这个主页成功引起了他们的兴趣，他们想知道更多项目细节。我们要写一个可以充分展示你的能力，并能给人留下好的第一印象的项目页面。用5秒时间看软件的架构就可以知道项目优劣。你一眼就能看出来一个程序员没有经验，他们的项目往往没有结构。项目文件要么在随便一个地方或者都在根目录。。命名的细节，例如是用‘doc’还是用‘docs’并不重要。这里是GitHub项目的：项目简介文件可以提供：一张图比一千个字更能说明问题。人们不会因为要看软件界面就去安装软件。请提供软件界面截图。一张图能抵一千个字，那么一个视频顶一千张图。：GitHub不允许插入视频，你可以使用动态图。如果该项目是网络应用，请提供网页地址。当然，所有人都应该能访问该地址。如果该项目是单机程序，请提供安装文件下载地址。如果安装文件看上去不专业，用户是不会安装它的。很多时候，是否专业跟发布方式有关。GitHub提供了一整套免费工具用于编连，打包，测试和其他功能。这些工具在专业软件开发中都是必须的。以前想要实现这些功能非常困难，但如今通过GitHub一切都非常简单。你没有理由不用它们。这是一个由C++实现的四子棋的例子。按钮从左到右代表：“没人在乎你的源代码——得知这个事实的时候我也很吃惊。我在整理代码上花了不少时间，但发现没人在乎。重要的不是代码，而是产品” （）比起猜，读一段软件功能描述要快10倍。比起自己弄明白软件用法，观看一个介绍基本用法的视频可以快100倍。比起逆向工程，读设计图表要快1000倍。你可以通过读源代码来搞清楚一切，但这个过程要费事得多。读源代码（解码源代码）是非常耗时的。只有在走投无路的时候才应该用。经验教训1：没人在乎你的代码，也不会有人去读你的代码。经验教训2：别指望别人会去读你的代码，也别强迫别人去读代码。挺好的。简单的项目更容易展示，更容易解释，面试官也更容易理解。比如大家都知道四子棋是怎么回事。即使第一眼看上去很简单，但每一个项目都包含了很多工作量：写一个好的用户界面，调整颜色，允许两个人一起游戏，加上对下一步棋的走子建议，加上 AI 选手等等。这个游戏规则很简单但是要把它做成好的软件要做很多工作。这些都是你在面对面的面试中可以跟面试官深入探讨的地方。你知道玩四子棋的时候先走的选手一定会赢么？【如果他不犯错的话】你知道如果第一个选手第一步棋不走中间的话，第二个选手一定可以将棋走成平局么？来源：, , Victor Allis事实上。我们测试过了。这个图是我们发出一堆简历之后的数据统计。这三个点击是我自己点的。在写这篇文章的时候我没有登录就去点了GitHub。我的错。从我上次找工作的经验来说，经过十几个电话面试（每次电话有一个技术人员）和几个现场面试（4到7个技术人员），只有一个人去看了我的GitHub页面。结论：没人关心GitHub，没人会看GitHub。每人都会问，是因为别人也在这样做。好处：既然没有人真的去看，你也可以拒绝参加这场GitHub的假面舞会。你可以用这个 去回应所有的GitHub要求。这个版本库包含用一百种语言实现的“Hello world”。这世上还有其他软件工程的好范例，不仅仅局限于GitHub。", "title": "技术面试中常被问到是否参与开源，那如何清晰展示 GitHub 项目呢？", "create_date": "\r\n\r\n            2017/09/10 ·  ", "tag": "IT技术. 2 评论 .Github.开源"},
{"content": "我是一个完美主义者，或者，至少我喜欢这样自居。不管怎样，我绝对离完美主义者不远了。这样本来挺好的。然而，我最近意识到，它实际上阻碍我成为一个更出色的开发者。至少，它阻碍了我的进步，并妨碍了我的学习。像很多初级开发者和普通开发者，我有一个不完成副项目（side projects）的习惯。不是因为我懒或没时间，出于某种原因，我似乎从来不会把事情做完。然后就是受打击的地方了。在进行项目时，我一直努力追求完美，这就是问题的所在。对我来说，我想交出一些了不起的东西，尽自己所能做出一些东西。想法是好的，但作为一个初级开发者，我面对的困境是，因为我每天都在学习，我的能力在不断增强。这样的话，我如何才能尽自己最大（且不断提高的）能力，将一个项目做到最好？！作为开发者，这是阻碍我进步的关键因素。我不知道要在哪里确定一条底线。我觉得很难对自己说“够了，可以继续前进了”。6 个月前，我写了一个简单的 URL 缩短器，以熟悉 Symfony 框架。我花了几个晚上的时间，做出了一个基本的工作产品（Working Product），以及一个大的框架介绍。做得很开心？好吧，不尽然。信不信由你，3 个月后，我仍在对这个小项目修修补补：修改样式，用 Ajax 改进表单提交，我甚至考虑过用 Vue 或 React 来实现。随着我的能力和知识的不断增加，。我不断看到能够改进的地方，并有了更好的改进方法。这在商业环境中是好事。在产品或项目上不断进行改进和迭代非常赞。但是，作为一个小小的学习项目，我明显用力过猛了，正在努力解决一个并不存在的问题。这不是尝试给 Bitly（知名短网址服务）造一个竞争对手，我只是利用这个小项目来加强自身的学习。事实上，根本没有人会看到这个项目！我并不是唯一会这么做的人，即使最有经验的开发者，也会在某个时候遇到类似的情况。当他们回顾几年前写的代码，他们可能会羞愧难当，甚至可能会对自己几个月前写的代码感到震惊。作为开发者，无论处于什么水平，你都在不断学习，这是野兽的天性。而经验告诉我们，你只有学会放手，才能继续前进。但说起来容易做起来难。作为一个初级的，或有抱负的开发者，“单单”继续前进就显得难得多了。在现实中，除非你的代码接受他人的审查，否则你完全不知道好与坏的标准。我的建议是，在你学习时，要创建一些东西，直到它看起来很得体，并能正常工作，此时你需要忘掉它继续前进。不要寻求完美，这是不存在的~ 你应该将时间花在学习并钻研更大、更好的事情上，而不是花在类似调整无关要紧的内边距这一类事情上。请务必相信我这个过来人的经验之谈！我最终明白了“”这句话，这也是二八定律告诉我们的道理。（原因与结果、投入与产出、努力与报酬之间的关系往往是不平衡的，结果、产出或报酬的 80％ 取决于 20％ 的原因、投入或努力。）当你处于学习阶段时，所有的项目都不需要做到“完美”。它们本身就是用于学习的项目，做完尽管放手让它们去。瞎搞瞎弄、缝缝补补、或者试图压缩最后 10％ 的时间，这些都不是对有限时间的合理使用方式。在 Web 开发中，完美是不存在的。只有一种情况除外，那就是…完成，因为“完成即完美（done === perfect）”。随着时间的推移，你能做出更大、更好的东西！", "title": "完美主义对新手程序员的影响", "create_date": "\r\n\r\n            2017/09/06 ·  ", "tag": "职场. 2 评论 .程序员.职场"},
{"content": "MySQL 8.0.3 即将发布，一起看看有什么新变化吧MySQL 8.0.3 即将发布 RC 版本，这预示着 8.0 版本离 GA 越来越近了。下面分享一下 8.0.3 版本的一些重要新特性、新变化：一起期待 8.0.3 的发布吧！", "title": "MySQL 8.0.3 RC 版即将发布，看看有哪些变化", "create_date": "\r\n\r\n            2017/09/11 ·  ", "tag": "IT技术.MySQL.数据库"},
{"content": "代码实现,限流的目的是通过对并发访问/请求进行限速或者一个时间窗口内的的请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务。前几天在DD的公众号，看了一篇关于使用 瓜娃 实现单应用限流的方案，参考《redis in action》 实现了一个jedis版本的，都属于业务层次限制。 实际场景中常用的限流策略：使用拦截器 + 注解优化代码工具：apache-jmeter-3.2\n说明： 没有获取到信号量的接口返回500，status是红色，获取到信号量的接口返回200，status是绿色。\n当限制请求信号量为2，并发5个线程： \n当限制请求信号量为5，并发10个线程：\n", "title": "基于 Redis 实现分布式应用限流", "create_date": "\r\n\r\n            2017/09/07 ·  ", "tag": "IT技术.Redis.数据库"},
{"content": "对于系统桌面，有人追求美观，有人追求简洁，有人追求实用，也有人就是喜欢默认的设置效果。接下来，推荐几款适用于 Linux 的开源桌面个性化工具，代码敲累了的时候，换换主题，说不定也能让你更放松。一款主打透明元素的扁平化主题，支持基于 GTK 3 和 GTK 2 的桌面环境，如 GNOME、Unity、Budgie、Pantheon、Xfce、MATE 等，内含 3 种不同的风格可供选择。ArcArc-DarkerArc-Dark一款扁平化主题，适用于 Ubuntu 以及其它基于 Gnome 的 Linux 系统。一款自适应的 Gtk+ 主题，遵循当前比较流行的 Material Design 设计风格。支持 GNOME、Budgie、Cinnamon、Unity、XFce4、Mate、LXDE 等桌面环境。一款结合了明暗元素的现代化平面主题，支持 Gnome、Unity、XFCE 和 Openbox 。这是一个图标主题，目标是适配大部分桌面环境。里面的图标受 macOS 和 Material Design 启发，主要是使用视觉上容易吸引眼球的渐变、阴影和简单的几何形式元素。基于非开源的  主题，并有一些额外的特性（如硬编码托盘支持，kde 颜色方案支持，libreoffice 图标主题，filezilla 主题，smplayer 主题…）以及其它的修改的 SVG 图标主题。有 Papirus 、Papirus Dark、Papirus Light、ePapirus 四种风格可供选择。这是一个托盘脚本，通过在 Linux 中自动探测你的默认主题，正确的图标尺寸，硬编码内嵌图标应用，以及正确的状态图标，来修正硬编码的托盘图标。它还支持上面提到的 Numix 和 Papirus 。", "title": "颜值即正义，超好用的 Linux 桌面个性化工具推荐", "create_date": "\r\n\r\n            2017/09/01 ·  ", "tag": "IT技术.Linux"},
{"content": "9. ,C#是企业中广泛使用的编程语言，特别是那些依赖微软的程序语言。如果您使用C#构建应用程序，则最有可能使用Visual Studio，并且已经寻找了一些扩展来对您的开发进行管理。但是，这个工具列表可能会改变您编写C#代码的方式。使用上面的链接直接跳转到特定工具，或继续阅读以浏览完整列表。Visual Studio Code是C#开发人员最受欢迎的代码编辑器。您可以使用Visual Studio Code与C#扩展功能实现强大的编辑功能，并完全支持C# IntelliSense和调试。由Xamarin开发，MonoDevelop具有许多与VS Code相似的功能，也是跨平台的。使用MonoDevelop，您可以在Windows，Linux和Mac OS X上快速编写桌面和Web应用程序。一个用于C#、VB.net和Boo项目的免费开源IDE，#develop（SharpDevelop）是VS Code的轻量级替代品。Jet Brains产品套件中一个成员，Rider是基于IntelliJ平台和ReSharper的跨平台.NET IDE。由Microsoft提供，这是一个很好的扩展，以加快Visual Studio的开发。简化jQuery框架编码，jQuery Code Snippets为Visual Studio 2012，2013，2015和2017提供了超过130个代码段。CodeMaid是一个开源的VS扩展，可以帮助您清理和简化除C#之外各种支持语言的代码。使用Refactoring Essentials，一个具有内置的C#和VB代码转换器的VS扩展，使您的C#代码更容易阅读和修复常见错误。SlickEdit是一个代码编辑工具，可以提高生产力并提高代码质量。它是一个跨平台的代码编辑器，可在九个平台上支持超过60种语言（包括C#）。Rextester（代表正则表达式测试器）是C#的简单在线编译器。C# Pad是C#的一个方便的REPL工具。使用起来很简单：输入代码，点击“Go”执行。另一个轻量级代码编译器，Jdoodle支持63种语言（包括C#），并允许您保存程序并与其他人共享URL。您可以将Jdoodle中创建的代码嵌入到您的网站，用于协作，在线访问等。C#的一个流行的调试工具，.NET Fiddle的灵感来自于JSFiddle.net，旨在快速，简单的代码测试，而无需打开Visual Studio并创建一个新的项目。Telerik Fiddler允许您在线执行代码。它提供了一系列功能，包括Web调试、Web会话操作、性能测试、安全测试等。Json.NET是一个流行的JSON框架。使用它，您可以在任何地方（Windows，Windows Store，Windows Phone，Mono和Xamarin）运行它时，创建、解析、查询和修改JSON，在XML和JSON之间进行转换。一个简单的在线编辑器，编写和执行C#代码，Scriptcs被设计为非常简单，以避免使用过于复杂的工具和解决方案阻碍您的工作效率。dotPeek允许您将.NET程序集反编译为C#。dotBeek是JetBrains提供的免费独立工具，基于ReSharper捆绑的反编译器。基于Red Gate的.NET Reflector开源反编译器，在2011年停止维护，ILspy需要.NET Framework 4.0。一个来自Telerik的反编译器，JustDecompile是一个免费的开源反编译引擎。Telerik代码转换器将VB代码转换为C#，反之亦然。一个简单而强大的工具，Telerik代码转换器易于使用，具有直观的界面。Cake（C#Make）是C#版的开源Make Build自动化工具。一个跨平台构建自动化系统，Cake使用C# DSL来编写代码，运行单元测试，复制文件和文件夹，压缩文件和构建NuGet软件包等任务。MSBuild是由Microsoft于2008年推出的。它不是Visual Studio平台的一部分，但它是您的C#开发工具包的一个很好的资源，例如在您构建代码项目时，除了解决方案之外。FinalBuilder是构建自动化工具的一个很好的商业选择。使用FinalBuilder，您不需要编辑XML或编写脚本来自动完成构建过程。SemanticMerge分析您的代码，旨在处理已被移动或修改的代码，使其成为团队协作的强大工具。Git就不需要介绍了。这是一个免费的开源版本控制系统，也是当今最流行的版本控制系统。TFS版本控制是Microsoft替代Git的一种，它集成到Visual Studio中。它是企业准备的，所以对于使用VS项目的任何规模的团队来说，这是一个不错的选择。BitBucket是Jira的Git替代品，也是一个有能力的版本控制工具——“唯一一个大规模的协作的Git解决方案。”SourceTree是另一个Jira产品，一个用于Windows和Mac的免费Git客户端，具有简单的Git GUI来管理您的仓库。一个用于即时测试C#，F#和VB中的代码片段的工具，LINQPad可以让您以交互方式查询数据库。Selenium是目前最流行的测试工具之一。它可以自动化Web浏览器，以便您可以在规模和精度上运行测试。由JetBrains创建的，ReSharper是.NET开发人员的Visual Studio扩展。使用它来即时分析代码质量，消除错误，安全地更改代码库等。OzCode是C#的Visual Studio扩展，提供强大的调试工具，因此您可以花更多的时间开发和更少的时间调试。CodeRush可以帮助您轻松找到并修复问题，像本节中的其它测试工具一样，是一个VS扩展。一个用于.NET和Java的轻量级开发工具，Prefix会实时显示日志、错误、查询等。它可以在您现有的工作站内使用 – 它是免费的。来自JetBrains，dotTrace是一个分析器，可帮助排除性能问题并加快应用程序的速度。ANTS性能分析器是.NET代码的分析工具，包括提供逐行分析统计信息。一个分析工具声称比任何其培训分析器更快，N Profiler提供丰富的.NET性能数据，可以节省90%的优化时间。Retrace是唯一将APM、日志、错误、指标和监控结合在一个平台上的开发者工具，可帮助您更好地构建。它专为生产和预生产服务器而设计，每月只需10美元。C#主要部署自动化工具，这使得自动化复杂的应用程序部署成为可能。一个CI构建服务器，不仅可以处理构建，而且还可以进行部署，Appveyor非常强大，安全，并且无需设置即可开始使用。AppHarbor不仅仅是部署：它是一个完全托管的.NET 平台服务。它用于托管从个人博客到高流量网络应用程序的所有内容。Jenkins不仅仅是部署自动化工具，也是最受欢迎的CI服务器，它将其覆盖面扩展到部署和交付阶段。Docker.DotNet是Docker API的C#客户端库。通过它，您可以通过编程方式与Docker Remote API进行交互。一个强大的工具来集中化C#应用程序，Distelli帮助您从头到尾自动化您的容器工作流程。有关如何使用Distelli构建和部署C#应用程序，请参阅 。本教程提供了构建和部署Docker C#应用程序的分步说明。C#和.NET Core 将在2018年及以后的得到巨大的发展，磨练C#技能将在未来几年内为您服务。我们希望您已经找到了一两种可以使用的工具，并提高了C#开发的质量和生产力。如果有什么工具我们遗漏了，请告诉我们，这个工具应该在这个工具包中有一席之地。", "title": "C# 最佳工具集合： IDE 、分析、自动化工具等", "create_date": "\r\n\r\n            2017/09/11 ·  ", "tag": "工具与资源.开发.C sharp"},
{"content": "编者按：根据StackOverflow的最新调查，MySQL仍然是全世界最流行的数据库，受访的开发者中有44.3%的人在使用，超过了第二位的SQL Server 10多个百分点。可是你知道MySQL是怎么诞生的吗？openocean 的一篇有关MySQL开发者Michael “Monty” Widenius的传记为我们揭秘。大学计算机专业的数量总是会随着技术公司的兴衰而起伏，而现在，计算机科学正处在全盛时期。这意味着，不管怎样，计算机科学专业的毕业生绝大部分可能都会去敲2年的代码，再转到产品管理，然后过渡到企业、创业或者商学院，接着再转为既有公司的中层管理，32岁的时候结婚，有了2个孩子，一个儿子，一个女儿，一条狗，还有一栋2层的漂亮房子。对于大多数人来说，成为程序员就是一份朝九晚五的工作，一份有保障的6位数薪水来偿还高昂的学费，一种达到目的的手段，没人应该为此受到责备。但对于千千万万无论好坏的程序员来说，只有一个Monty Widenius。Monty是一位编程天才。19岁的时候，他从赫尔辛基理工大学辍学开始全职工作，因为大学已经没有什么东西可以教他了。在独自一人写完除了一个库以外的全部代码之后，33岁时，他发布了MySQL，后来后者成为了全世界最流行的开源数据库。55岁时，他藐视着对老年人的歧视，仍然是自己公司最好的程序员。Monty1962年出生于赫尔辛基，1978年他用暑假铺沥青挣来的钱买下自己的第一台个人计算机的。Monty迅速意识到自己相当擅长写代码——对于别人来说很复杂的事情他却觉得很简单，而且他对工作非常投入。Monty用一种在讲瑞典语的芬兰人中常见的浓厚口音说：“基本上这就像是在阅读一本真的非常非常好的书。或者像在玩视频游戏。你知道开始玩游戏然后嘣一声3小时的时间就过去了的那种感觉吗？写代码对我来说就是这种感觉。”当别人跑去聚会的时候，Monty却呆在家里编程。他把计算机从里到外都摸透了。他把BASIC的能力推到了极限。Monty说：“学校并不理解编程不是像语言或者历史这样的东西，它不是靠学就能学来的。所以学校是不够的。拔尖的黑客是万里挑一。他们奉献了所有能用的时间，10小时，16小时，每一天，年复一年周而复始。大多数人都不愿意做这样的事情。大多数人宁愿好好生活。”在Monty眼里，好的代码是写过一次就永远不需要再碰的那种。从性能角度来看它已经是最优化了，你可以不断增强，但永远都不需要重写。到1980年，17岁的Monty痴迷编程已经无法自拔，他需要把自己计算机的内存从8KB扩到16KB。由于芬兰没有商店卖他想要的东西，于是他弄了一条船去到瑞典Allan Larsson的计算机商店。通过Allan，Monty结识了David Axmark，三人沟通交流了多年，就各自项目互相帮忙，偶尔也会一起协作。1995年，他们一起成立了MySQL AB。Monty负责编程，David和Allan负责干完其他的事情。自1981年以来，Monty就一直以芬兰公司Tapio Laakso Oy程序员的身份在写MySQL前身的代码，他和Allan一起创办的数据仓库公司也要用到那个东西。然而，知道1995年，在Allan和David的游说之后Monty才决定在他写的东西之上增加一个SQL层。1996年10月，MySQL终于发布了，它得到了广泛的欢迎。MySQL快速、可靠并且易学，这主要是因为在多年的开发中Monty总是不断把正是客户的反馈整合进来。MySQL的初衷是存储和管理大数据。如果有人想要跟踪不同的数据点，他们互使用数据库，也就是有点像微软Excel那样的东西。然而，随着数据变得越来越大，查找Excel这样的数据库就会变得慢多了，也不再可靠。MySQL有能力存储大量数据，并且返回搜索结果极其迅速。“My”来自Monty女儿的名字，而“SQL”就是结构化查询语言（Structured Query Language）的意思，是一种跟数据库沟通的语言。对MySQL开源的决定出自1985年的另一次芬兰到瑞典的乘船旅行，这一次是在一场开源大会上。Monty说：“讨论没花多少分钟。我们都希望回馈给开源社区一点东西。哪怕有人想拷贝或者偷盗我们的代码，我们认为自己能挣的钱也不会比现在少。”开源项目使得开发者社区帮助把软件做得更好，但从商业角度来看不好的是货币化就要困难多了。为了避免这一点，Monty补充了一个条款，那就是如果任何企业用MySQL来赚钱的话，就需要付费授权。对此MySQL的代码里面并没有进行任何限制，但就靠这一荣誉制度MySQL实现了扩张并开始赚钱。Monty说：“我认为开源是开发软件的更好方式。但你仍然需要赚够钱来招聘员工，成立公司去跟闭源社区竞争。MySQL是第一款做到这一点的产品。”Monty在MySQL AB的职位是CTO，对于大多数成熟的公司来说，CTO其实已经很少再编程的了。然而，Monty从未停下来过，他的绝大部分时间都是在写代码。这种（很少管理的）做法会导致很多晚期阶段初创企业内爆，但哪怕公司人数已经达到550人，Monty在MySQL AB建立的独特文化也使得他可以避免天天开会的烦扰（事实上，Monty甚至都不接受议事日程邀请）。Monty说：“我总是招会自我驱动的人进来。所以我不需要告诉他们太多东西。而开源意味着你有开源社区，大家会给你提供代码，你可以看看那些代码的质量，看看他们是怎么跟社区互动的，跟你是怎么沟通的，他们会问什么问题，在这些情况下很容易就能看出一个人是好是坏。在一次面试里面是很难了解清楚编码者有多好的。”MySQL的成功是CTO Monty与CEO Mårten Mickos通力协作的结果。两人能力都很强且对公司非常重要，但方式不一样。Monty是技术专家，专注于员工生产出尽量完美的代码。Mårten是公司建设者，专注于交付东西并帮助团队发展。正是两人的联合愿景制造出了MySQL。但在一家没有免费洗衣、免费午餐、站立办公桌的公司里，是Monty的个人魅力吸引住了变成人才。Monty不是好交际的筹资人，讨好别人的人，博弈论大师，或者职业沟通者。他会写代码，而且写得很好。在Monty看来赢得开发者尊重是很简单的事情：“你干的是跟他们一样的事，而且干得更好。”（“这些年来我开发了成百上千个程序：MySQL是其中被用得最多的一个，但其他的都只有我自己用。”）。他警告说，改变环境和代码库将意味着哪怕是最好的程序员也要去了解一堆的东西。在Sun被Oracle收购之后，Monty成立了MariaDB，这是MySQL的一个社区版的分支，开发的团队成员很多都是MySQL团队里面的，使用的也是一样的官方语言：“蹩脚的英语”。MySQL的许多热心的开源信徒跟着Monty去到了MariaDB。MariaDB更加面向开发者，允许由外人打补丁这样的事情发生，在很多Linux发行版中它都是默认的数据库。Monty对开源和开发者的承诺是坚定的——OpenOcean原先是Monty用自己在MySQL的所得成立的，使命是投身于开发者驱动、有技术深度的产品。他仍然在赫尔辛基自己家中主持开发者午餐，很快OpenOcean就将推出一个Slack频道让开发者可以直接向Monty提问。在几十年的时间里，Monty对塑造开源社区无私的形象做出的贡献无可争议的。但这里面大部分的功劳都应该归到成千上万无名的程序员和黑客身上，是他们投入的时间和能力造就了开源的繁荣，也是这批人才能确保开源革命的继续。", "title": "MySQL 创始人：写代码比打游戏还爽，程序员应该多泡开源社区", "create_date": "\r\n\r\n            2017/09/05 ·  ", "tag": "职场. 1 评论 .MySQL"},
{"content": "关于 Meld,我们已经 Linux 中基于命令行的比较和合并工具，再来讲解该系统的一些可视化的比较与合并工具也很合理。首要的原因是，不是每个人都习惯使用命令行，而且对于某些人来说，基于命令行的比较工具可能很难学习和理解。因此，我们将会推出关于可视化工具  的系列文章。在跳到安装和介绍部分前，我需要说明这篇教程里所有的指令和用例是都是可用的，而且它们已经在 Ubuntu 14.04 中测试过了，我们使用的 Meld 版本是 3.14.2。 主要是一个可视化的比较和合并的工具，目标人群是开发者（当然，我们将要讲到的其它部分也会考虑到最终用户）。这个工具同时支持双向和三向的比较，不仅仅是比较文件，还可以比较目录，以及版本控制的项目。“Meld 可以帮你回顾代码改动，理解补丁，”其官网如是说。“它甚至可以告知你如果你不进行合并将会发生什么事情。”该工具使用 GPL v2 协议进行授权。如果你用的是 Ubuntu 或者其它基于 Debian 的 Linux 分支，你可以用以下命令下载安装 Meld：或者你也可以用系统自带的包管理软件下载这个工具。比如在 Ubuntu 上，你可以用 Ubuntu 软件中心（Ubuntu Software Center），或者用 ，它从 Ubuntu 16.04 版本开始取代了 Ubuntu 软件中心。当然，Ubuntu 官方仓库里的 Meld 版本很有可能比较陈旧。因此如果你想要用更新的版本，你可以在下载软件包。如果你要用这个方法，你要做的就是解压下载好的软件包，然后运行  目录下的  程序。以下是 Meld 依赖的软件，仅供参考：装好了软件，就可以看到类似这样的画面：有三个选项：比较文件（File comparison），比较目录（Directory comparison）以及版本控制视图（Version control view）。点击“比较文件”选项，就可以选择需要比较的文件：就像上面的截图那样明白，Meld 也可以进行三向比较，但是在这一系列文章的第一部分，我们只会讲更常用的双向比较。接着，选择你想要比较的文件，点击“比较”（Compare）按钮。软件会在两边分别打开两个文件，高亮不同的行（以及不同的部分）。两个文件的不同之处在第二行，差别在于  文件的第二行多了一个 。你看到的黑色箭头是用来进行合并或修改的操作的。该例中，向右的箭头将会把  文件的第二行改成文件  中对应行的内容。左向箭头做的事情相反。做完修改后，按下  来保存。这个简单的例子，让你知道 Meld 的基本用法。让我们看一看稍微复杂一点的比较：在讨论这些变化前，这里提一下， Meld 的界面中有几个区域，可以给出文件之间的差异，让概况变得直观。这里特别需要注意窗口的左右两边垂直的栏。比如下面这个截图：仔细观察，图中的这个栏包含几个不同颜色的区块。这些区块是用来让你对文件之间的差异有个大概的了解。“每一个着色的区块表示一个部分，这个部分可能是插入、删除、修改或者有差别的，取决于区块所用的颜色。”官方文档是这样说的。现在，让我们回到我们之前讨论的例子中。接下来的截图展示了用 Meld 理解文件的改动是很简单的（以及合并这些改动）：接着，我们滑动文件，从一个改动跳到另一个。但是，当要比较的文件很大时，这会耗一点时间，当你想要滑动文件跳到一个改动的位置时，也会变得很困难。如果是这种情况的话，你可以用工具栏的橙色箭头，就在编辑区域的上方：这些是你使用 Meld 时做的一般性的事情：可以用标准的  组合键在编辑区域内进行查找，按  键让软件进入全屏模式，再按  来刷新（通常在所有要比较的文件改变的时候使用）。以下是 Meld 官方网站宣传的重要特性：注意还不仅仅只有以上所列的。网站上有个专门的，里面提到了 Meld 提供的所有特性。这个页面列出的所有特性分为几个部分，以该软件是用来做文件比较、目录比较、版本控制还是处于合并模式下为基础进行划分。和其它软件相似，有些事情 Meld 做不到。官方网站上列出了其中的一部分：“当 Meld 展示文件之间的差异时，它同时显示两个文件，看起来就像在普通的文本编辑器中。它不会添加额外的行，让左右两边文件的特殊改动处于同样的行数。没有做这个事情的选项。”我们刚刚了解到的不过是皮毛，因为 Meld 还能做很多事情。考虑到这是教程系列的第一部分，这也挺不错的。这仅仅是让你了解 Meld 的作用，你可以配置它，忽略一些特定类型的改动，让它移动，复制或者删除文件之间的个别差异，也可以从命令行启动它。在即将推出的系列教程中，我们将会讲述所有这些重要功能。", "title": "Linux 系统上的可视化比较与合并工具 Meld", "create_date": "\r\n\r\n            2017/09/02 ·  ", "tag": "IT技术.Linux"},
{"content": "热门：预处理器,InfoWorld 作者总结的 21 个热门编程趋势和 21 个要变冷的趋势，包含 Web 开发，移动开发，大数据，教育等方面。热门还是冷门？无论 Web 开发、主板开发还是培训教育，都需要了解应用开发过程中哪些技术正在兴起，哪些技术要过时了。程序员们喜欢嘲笑时尚界的潮流说变就变，像风一样捉摸不定。裙子时而短时而长，流行色频繁更替，领带越来越窄，越来越薄。但是在技术的世界中，严谨、科学、数学和精准原则却一直流行。下面是现代程序世界的热门技术和冷门技术列表。可能有人会不同的意见，也可能会有遗漏，而这正是编程的迷人之处：快速变化、激烈辩论、峰回路转。不久之前，人们创造一门新的编程语言需要进行许多工作（从源代码到机器代码转换过程的所有工作）。 然后一些人指出他们可以推翻前面的做法。 现在程序员有了想法以后只需要编写一个预处理器，预处理器可以使用丰富的库和 API 将新代码转换成旧版本的代码。Python 、JavaScript 这类的脚本语言曾经仅限于小项目，但现在许多重要的工作都开始使用这些语言。不喜欢 JavaScript 的程序员还开发了 CoffeeScript (一种可以再次编码的预处理器)，以避免使用繁琐的标点符号。它有几十种以不同方式预处理语法的方法。那些喜欢动态类型的程序员，Groovy 是 Java 省略掉过多标点符号的简化版本。现在好像有（如 Scala 或 Clojure）在 JVM 上运行，但只有一个 JVM 。我们可以在 .Net 虚拟机上运行多种语言，为什么还要重新发明轮子？这并不完全正确，hypervisors 也有它们的用武之地，而且许多 Docker容器运行在以 hypevisors 为基础的操作系统中。然而，Docker容器与虚拟机映像相比实在太小了，这使得它们更容易使用和部署。当开发人员可以使用 Docker容器时，它们更愿意使用 Docker容器，这要归功于它可以在部署过程中轻松操作。 像 Joyent 这样的聪明公司正在开发可以占用更多资源的技术，以便容器可以在“裸机”上运行。在数字商业时代需要足够敏捷来抓住新机会，同时还要有效地维护传统的内部部署系统。很久以前，每个人都学习如何使用 JavaScript 弹出警告窗口或如何检查表格中的电子邮件地址是否包含 @符号。 现在，HTML AJAX 应用程序已经如此成熟，以至于很少有人会再从头开始编写这些功能。 采用精心制作的框架，然后编写一些胶水代码来实现业务逻辑要简单得多。现在有许多框架可以用来处理 app、网页等的事件和内容，这些 Kendo, Sencha, jQuery Mobile, AngularJS, Ember, Backbone, Meteor JS 等。这些只是网络应用程序的框架。 还有一些框架旨在为智能手机/平板电脑提供跨平台开发技术。  和  都是使用 HTML5 创建 app 的技术。曾几何时，向网页添加一点格式意味着打开 CSS文件然后写入类似 font-style:italic 这样的命令，然后保存文件，就可以在一上午的紧张忙碌之后去吃午饭了。现在网页如此复杂以至于很难使用如此简单的命令完成一个文件。调整一个颜色可能会导致一切都无法正常运行。这就像他们评价阴谋家和生态学家一样：一切都是互相联系的。这就是 SASS 和 Compass 等 CSS框架的用武之地。 它们通过提供编程结构（如实变量，嵌套块和混合）来鼓励规范，可靠的编码。 这在编程层面中可能听起来并没有多新颖，但对于设计层来说这是一个巨大的飞跃。曾经有段时间， 视频是指 YouTube 或 Vimeo 上观看的视频。它是一种存在于专有页面上的单独内容。然而随着越来越多的网站使用音频来构建区块，其过程与使用 静态 GIFs 或者 JPGs 进行构建区块一样，这种情况正在发生改变。突然之间，屏幕变得生动起来。设计师发现，现代视频标签只是另一个矩形，尽管矩形通常需要程序员使用更多的 JavaScript 代码来控制。 我们只是开始明白，在客厅沙发前面的盒子可以不再是我们获取视频的主要来源，而可以仅仅是一个装饰。每个人都希望自己看起来像是圈子里的大人物，如果他们在圈子里有没影响力，那么他们会寻找一个适合他们脱颖而出的圈子。 所以，当“大数据”开始在高管之间开始流行时，这些高管要求最大，最强大的，就像购买游艇或摩天大楼一样。有趣的是，许多问题没有大到要用高级大数据解决方案来解决。当然，像谷歌或雅虎这种跟踪我们浏览的所有网页的公司是需要大数据解决方案的，他们的数据文件很大需要用 petabytes 或 yottabytes 来计量。但大多数公司的数据都可以轻松地用一个 PC机内存进行处理。我是用一台在 16GB 内存的 PC 机来写这篇文章的，这台 PC 足够处理十亿件几个字节的事件。在大多数算法中，数据不需要读入内存，因为直接从 SSD 获取就可以了。可能存在需要 Hadoop云几十台机器并行运算来实现快速响应的需求，但是许多需求在单台机器上处理即可，这样还可以避免产生麻烦的协调或通信问题。可能并不是 Hadoop 不流行了，而是 Spark 太热门了，这使得 Hadoop 模型看起来有些老。Spark 借鉴了Hadoop 从大量数据中提取语义的做法的最佳思路，并通过一些改进使代码运行的更快。Spark 最大的优势在于它将数据保存在快速内存中而不是需要所有内容都写入分布式文件系统。当然，许多人正在通过使用 Spark 的处理速度对存储在 Hadoop 分布式文件系统的数据进行处理，因此，Spark 和 Hadoop 更像是合作伙伴而不是竞争对手。没有人知道 “人工智能”的真正含义，它们对营销人员很有利，特别是在“大数据”广泛应用的今天。他们从人工智能中提取术语并且升级数字处理算法的复杂度来处理我们的 log 文件和点击流。通过从具有 50年历史的 AI研究中借鉴更复杂算法，我们比以往任何时候都更有可能从噪音中发现信号。从机器学习框架到认知计算的工具，再到 IBM 的沃森，总能解决你的问题。它们每个都提供自己机器的智能水平，我们可以使用它们进行更多的数据分析和取证。就在几分钟之前，我们还都将梦想寄托在虚拟现实中，虚拟现实可以通过一些视频卡在我们视网膜上绘制图形。这种情况仍然可能发生，但与此同时，机器人的世界也将迅速发展。每个学校都有一个机器人团队，家庭的每个角落充斥着机器人，机器人吸尘器已经是旧新闻了，无人机正在自由翱翔。这意味着程序要开始考虑如何写代码来控制新机器。目前，这意味着为 Raspberry Pi 这样的轻量级控制器写脚本，但是随着库文件发展的越来越复杂，必然会发生变化。比如，许多机器人专家喜欢研究 C语言实现的机器视觉平台OpenCV 中的代码。这意味着需要考虑新的规则，新的类库，新的协议，和许多其他新的主题。还记得 URLs 指向满是静态文本和图片的网页的时代吗？把所有信息都放在被称为网站的单独网页中是多么地简单和古雅。设计团队在网站地图上花费几个小时的时间来使网站更易于导航。新的 web 应用通过数据库填充内容。当 web应用需要信息时，它从数据库获取信息并将其放入本地模板中。我们不需要使用构建 web页面的所有 web附加组件来标记数据。数据层与展示和格式化层完全分离。移动计算的兴起是另一个原因在于：单个响应式页面工作机制与app类似，可以减少从鱼龙混杂的应用商店中寻找想要的内容所浪费的时间。假如你有一个移动内容的好主意，那么需要为 IOS、Android、Windows 8甚至黑莓OS 或者其他的系统开发不同的版本。每个版本都需要一个独立的团队使用不同的编程语言实现。然后每个平台应用商店都需要使用自己的版本，才能把 app 分发给用户。或者，我们可以创建一个 HTML 应用，然后把它放到各个平台都可以运行的网站上。如果有变化，也不需要到应用商店去请求快速审核错误修复。 现在 HTML层速度越来越快，并且运行在速度越来越快的芯片上，以便于它可以在更复杂和互动性更高的应用程序上更好地与本地应用程序竞争。是不是几年前苹果专卖店门前还要排蜿蜒的长队？ 现在时代变了。 虽然 iPhone 和 iPad 还拥有大量热爱它们丰富而复杂的界面的铁杆粉丝，但从原始销售数量来看，Android更具优势 。 有报道甚至说 80％ 以上的手机都是 Android系统。原因可能就在于成本。 即使 iOS设备只需要花费很少的前，Android世界充斥的大量竞争也可以将产品的价格压缩到 iOS设备的五分之一。 省钱总是很有诱惑力的。但另一方面，也可能与开源有关。每个人都可以在市场上竞争，他们也是这样做的。我们有大大小小的安卓平板，安卓相机甚至安卓冰箱。没有人需要在创新之前先请示“妈妈，我可以吗?”。如果他们有一个好点子，做就可以了。不过，Apple 也在向安卓学习。iPhone 6 有了不同尺寸的屏幕，或许机会就在眼前。当软件非常简单，可以很好的安排一系列指令时，CPU 是计算机的王者，因为它承担了所有的工作。 现在，视频游戏充满了可以并行运行的大量图形程序，显卡可以运行这些图形。 我们很容易花费 500美元、600美元甚至更多来购买各种显卡，一些重度的游戏玩家可能拥有不止一两个显卡。 这些显卡的价格是许多基本台式机显卡价格的两倍。 游戏玩家并不是唯一吹嘘他们的 GPU 的人。 计算机科学家现在将许多并行应用程序转换到 GPU 上运行，这样速度可以提高数百倍。当然，我们可以通过阅读包括初中棋牌俱乐部副总裁的成就清单来了解候选人。 但阅读某人的实际代码则更加丰富和具有启发性。 他们注释写的清楚吗？ 他们把很多时间浪费在把内容写到作用寥寥的类里吗？他的架构真的有扩展空间吗？ 所有这些问题都可以从他们的代码的发现答案。这就是为什么参与开源项目对找工作越来越重要。 从专有项目共享代码是很难的，但开源代码可以随处可见。当亚马逊在黑色星期五卖力推销电脑和其他电子产品时，却忘记了推销他们的云服务。在不久的将来，它很可能会这么做。以前，公司设立自己的数据中心并且聘请员工来维护购买的电脑。 现在，他们租赁电脑、数据中心、工作人员、甚至按小时租用软件。 任何人都不想处理购买带来的麻烦。这一切都是好主意，至少在网站发生病毒事件（你的点击将为所有物品支付费用）之前是这样的。尽管现在只有亚马逊发现了自动提供云的方法，趋势将会趋同。云计算早期阶段，供应商强调一键获得正在运行的机器是多么地容易。那时，简约是王道。现在选择正确的机器并找出合适的折扣方案可能比编写代码要花费更多的时间。 我们可以获得几十种机器配置文件，大多数云提供商都提供一些老型号的电脑。 所有供应商都提供不同性能水平的机器，因此我们需要对它们进行基准测试，以确定哪种性价比最高。 少用一些 RAM 来每小时节省 12美分有意义吗？ 如果需要几个月连续运行 100台机器，那么这很重要。更复杂的情况在于，云公司还会为提前付款或批量购买提供不同的折扣方案， 我们也必须把它们考虑在内。 购买一个云成本工程的在线课程就可以了解这些内容了。当数据很少时，我们不需要考虑如何移动它。 我们可以将其备份到磁带或者安装 RAID硬盘。 但是现在数据如此之大，以至于我们不得不考虑我们在哪里使用它们。这变得越来越重要，因为更多的服务发生在云端的某个地方，而不是 RAID阵列所在的机架。让我们来看看亚马逊的新款 Snowmobile ，这是一个可爱的内部名称，它是用于装载可容纳 100PB 数据硬盘的移动容器。 他们还制作了一个叫做 Snowball 的小盒子，可以容纳 80TB 。 两者都将像运送货物一样运送数据，而不是采用光纤信号。 一项估计表明，通过 1Gbps 的光纤线路下载 100PB 的数据需要 28 年，而货运卡车可能会在几天内将集装箱运送到全国各地。所有这一切说明，开发人员需要开始考虑从哪里采集数据、在哪里使用数据。我们采集了比以前更多的数据，把它们移动到正确的地方也比以前也更加重要。正如 Wayne Gretzky 所说，他的成功在于提前计划并且通过分析对趋势进行预测，而不是仅仅把注意力放在正在发生的事情上。网站并没有真正死亡，只是新的音频接口方兴未艾。亚马逊、谷歌和苹果都在主推用语音来解决问题来替代通过敲打电脑键盘输入内容来解决。这对于程序员来说意味着更多的工作，因为所有这些机制都有新的 API ，比如 Alexa 控制灯光的新开关。 如果您的公司想要连接这些音频接口，您最好现在就开始了解。毕竟，键盘和 URL 已经是上个世纪的发明了。服务器领域一直在线程模式上蓬勃发展，这使得操作系统允许开发人员各种任性、低效、放纵的行为。 无论采用愚蠢的循环还是更多的程序编码，操作系统将通过线程之间的切换平衡性能。然后Node.js 与 JavaScript 回调模型出现，这些代码运行速度非常快–比任何人期望JavaScript达到的速度都要快。突然间，创建新线程的开销变得明显，Node.js 繁荣起来。 使用 node.js 时，如果程序员的表现不好会出现问题，但这在很大程度上是对他们是很有好处的。约束程序员的可用资源会促使程序员开发出更快的代码。Node.js 还得益于它可以使前后台保持一致。两者运行相同的代码，这使得开发人员更容易迁移和重用函数。 因此，Node.js 已经成为互联网上最热门的堆栈。过去，PHP 是实现动态网页的简单方法。 我们可以通过在HTML 标签之间嵌入简单的代码来实现一些变化。为了便于 Web 开发人员使用，它是如此的基础，但速度也慢得足以让硬件程序员嘲笑。这已成为过去，WordPress 和 Facebook 这样的 PHP 爱好者通过引入即时编译器技术(该技术使 Java 成为高性能解决方案)使得PHP代码比以往任何时候都快。 现在，像 HipHop虚拟机和 PHP 7.0 这样的工具的传输速度可能达到旧版本的两倍。Node.js 和 Java，准备接招吧。计算机辅助课程不再新鲜，每个人都可以观看视频讲座，并且可以加快或者放慢视频播放速度或者要求教授重复最后一点。在线论坛也改变了以前一个人主导讨论的旧形式。在线课程的本质和技术不仅颠覆了教育产业结构，还实现了随时随地学习的灵活性。这正在改变人们的观念，人们不再需要为与他们有关或无关的大量课程而投入四年高昂的学费。在你不知道自己是否需要在编译器上工作时，为什么要学习编译器课程？如果老板想从关系数据库切换到NoSQL引擎，那么我们可以将时间用于现代数据存储的课程上。只有在需要的时候才获得新信息，不要用快要腐烂的方法来扰乱思维。", "title": "编程趋势：21 个热门和 21 个要降温的", "create_date": "\r\n\r\n            2017/09/02 ·  ", "tag": "IT技术. 1 评论 .编程.职业"},
{"content": "技术和人均 GDP 的相关性,【导读】：Stack Overflow 工程师最近 David Robinson 做了一次数据分析，总结了程序员的技术选择和所在国家收入之间的关系。Stack Overflow 非常热衷于利用数据来和用户分享对全世界开发者社区的认知。比如这篇就是个很好的例子，它通过对全球开发者在 Stack Overflow 上询问 Andorid 相关问题统计，得出了结论：收入较低国家的开发者询问 Android 问题的数量要高于高收入国家的开发者。这个问题引发了我们的联想：这种不同又会如何影响全球的软件开发产业呢？在本文中，我们就探索了上述的问题，并且发现通过收入来区分软件工业的发展，是一种很有效的办法。本文中的所有分析结论都是基于 2017 年 1 月 到 8 月的数据，并挑选在这段时间内出现频率 Top 250 标签进行统计的。为了减少数据样本过大可能造成的偏差，我们集中选取了相应时间段内来自 64 个国家的超过 500 万个问题进行分析。需要说明的是，这些数据很大程度上只反应了英语开发者们的行为模式（当然通过对西班牙语和葡萄牙语站点的分析，发现在墨西哥，西班牙这些国家，得到的分析结论和英语国家差不多）。在最近的一篇文章中，我们通过计算 Android 相关问题的比例（就是某个国家Android相关的问题的数量占该国整体Stack Overflow问题数据量的百分比），发现这个比例和这个国家的人均GPD是成反比的。所以我们也想知道，其他种类的技术和人均GDP的关系。因此我们调查了主流的编程语言和平台，包括PHP、Python、R 等等。统计发现，来自某个国家 Android 相关问题和 PHP 相关问题的数量是和国家的收入情况成反比的，而同 Python、R 语言相关问题的数量则是正比。当然，在每一个统计案例里都会有例外的情况（例如，来自人均收入较高的韩国的 Android 问题数量要远超我们的预期，来自中国的 Python 问题的数量相对较低），但是总体来看，这种正反比关系还是很有说服力的。（多重假设检验调整后，每一种语言案例统计的决定系数都在 0.5 到 0.6 之间，P 值为 10 的负六次方）。在我们调查软件技术趋势时，通常只会把全世界的国家分成两组（即高收入国家和非高收入国家）来统计。我们不会把各国分成许多组来把相关性问题复杂化。因为在这方面已经有了很成熟的划分标准，我们就直接用就可以了，这种分级法是以人均国民总收入（GNI）为基准的（具体的分类方法可以看）上图显示，全球一共有 78 个国家属于高收入国家，这些国家多半由美国、加拿大、西欧、部分中东和东亚国家，以及澳大利亚/新西兰构成。通过统计学的手段可以证明，这种划分方法是有足够依据的，而且这种划分方法比其他的方法更有意义，比如很多时候人们喜欢按照东西半球来划分国家，可实际上澳大利亚的技术分布情况却更接近美国和欧洲，而不是同属东半球的中国和印度尼西亚。这种分类方法同时也把 Stack Overflow 的访问量分成了两组，其中高收入国家访问量超过 2/3，剩余的国家占了访问量的不到 1/3。（得到这样的结果是和被调查国家软件开发人员的数量、互联网的基础设施的情况、以及说英语人数的情况严重相关的）。其中非高收入国家的访问量的排名分别为：印度、巴西、俄罗斯和中国。我们已经把软件开发的世界分成了两个区域了。那么高收入国家和非高收入国家在使用的技术上有什么不同呢？我们从中可以看到一些有趣的结论：我们之前已经看到，Python 和 R 语言的使用情况和国家的富有程度是相关的。Python 在高收入国家使用的规模大约是其余国家的两倍之多，而 R 语言的使用规模差达到了 3 倍多。我们还注意到，通过对内容更具体的标签（tags）的统计，发现在Python和R科学计算领域，使用不同的计算包的人收入跳度很明显，例如 pandas、numpy,、matplotlib 和 ggplot2。这说明了在数据科学研究方面，不同的技术角色之间存在收入鸿沟。当然在越富有，工业化程度越高的国家，数据科学研究的占国家经济的比例越大，程序员的学历也越高，这个结论是符合逻辑的。在 Stack Overflow 上还有两个值得一提的语言就是 C 和 C++，高收入国家的程序员访问这两种语言的次数比低收入国家程序员多。对这个现象，有一种猜测是，它和教育机构有关：因为在之前的一篇的帖子里，我们发现美国的大学对 C/C++ 的访问频率是非常高的。当然这个现象也可能和电器制造商的地理分布情况有关。：我们在以前的一篇的帖子中讨论了 Android 开发的情况，除此之外，还有一种技术和低收入国家息息相关，那就是 PHP。在Stack Overflow上，来自低收入国家的对 CodeIgniter(一个PHP开源框架)的问题非常的多，而高收入国家队这个框架的提问几乎没有，这么大悬殊实在是一个很有趣的现象。经过进一步的调查，发现对 CodeIgniter 的重度访问来自于南亚，东南亚（尤其是印度、印度尼西亚、巴基斯坦和菲律宾），来自美国或者都周的访问几乎没有。所以可以推断，这个框架主要是这些外包公司用来开发门户网站用的。我们做这些统计当然是因为对编程语言生态系统的兴趣。而且这对我们日后要做的数据探索有很大的启发。我们在说软件开发工业方面的问题时，要意识到我们的问题都是由两个单独的问题混合起来的，这很重要，因为这种混合会给我们带来更多的信息。比如，我们想找到是哪些技术给Stack Overflow带来最大的流量，例如：《》。如果我们把访问量最多的技术列出一张表，你会发现高收入和低收入的国家的分布是完全不一样的。例如，2017 年以来，Python 是来自高收入国家被访问第二多的话题，但是在非高收入国家，Python 只能排到第 8 位。而本文作者自己使用的 R 语言，在高收入国家访问数量的排名是第 15，但是在非高收入国家排名却在 50 开外。这些数据对 Stack Overflow 了解全球的开发者生态来说都是很重要的数据。而对于美国的技术招聘者来说，他们需要掌握未来的动向，所以他们需要了解更多的方面的数据，而不仅是“来自印度的学生要学习什么样的计算机语言”、“技术投资人在肯尼亚寻找合适的技术公司”这类话题。", "title": "程序员的技术选择：发达国家和发展中国家有这些差异", "create_date": "\r\n\r\n            2017/09/04 ·  ", "tag": "开发.编程语言.薪资"},
{"content": "背景,Yelp 拥有超过 1 亿张由用户生成的照片，这些照片从晚餐、理发，到我们最新的功能之一：yelfies。这些图像占据了用户 APP 和网站的大部分带宽，这意味着存储和传输的巨大成本。为了向用户提供最好的体验，我们努力优化这些图片并将其平均大小缩小了 30%。这样节省了用户的时间和带宽，并降低了为这些图像提供服务的成本。哦，我们这样做都没有降低图像的质量呢！Yelp 已经帮用户存储上传的照片超过 12 年了。我们那些将无损格式的图片（PNG，GIF）保存成 PNG 格式，而所有其他的格式的图片则保存成 JPEG 格式。我们保存图片用的是 Python 和 Pillow，并使用如下代码片段，开启了我们照片上传的故事：以此作为起点，我们开始研究潜在的文件大小优化方法，可以让我们在不损失质量的前提下使用。首先，我们不得不决定是自己来处理这个问题，还是让 CDN 提供商用他们的魔力来神奇地改变我们的照片。在优先保证高质量的内容前提下，去评估众多选项并使得潜在的尺寸与质量相互抵消是有意义的。我们先行调查了当前照片文件大小缩小的现状 – 可以做出什么改变，以及与每个改变相关联的大小/质量下降。随着这项调查的完成，我们决定从三大类方法来着手。这篇文章剩下的部分解释了我们做了什么，并在每项优化中获得了多少收益。这是我们最简单的更改之一：启用 Pillow 中的设置，以 CPU 耗时为代价（optimize = True）来节约更多的文件大小。 由于该权衡的本质，这样做并不会影响图像质量。对于 JPEG 格式的图片，该标志位会指示编码器，通过扫描每张图片做一次附加的遍历，来找到最佳霍夫曼编码。对每张图片的第一遍扫描，我们不是写入文件，而是计算每个值的出现统计，这是计算理想编码所需要信息。PNG 内部使用 zlib，因此在这种情况下，标志位优化能有效地指示编码器使用 gzip -9，而不是 gzip -6。这是一项简单的改进，但事实证明它并非灵丹妙药，只减少百分之几的文件大小。将图像保存为 JPEG 格式时，你可以选择几种不同的类型：此外，渐进式文件打包方式通常会使得文件尺寸减少。如维基百科文章中所详尽解释的那样，JPEG 格式在 8×8 像素块上使用 Z 字形模式进行熵编码。当这些像素块的值被解包并按顺序排列时，我们通常首先得到的是非零数字，然后是 0 的序列，用该模式对于图像中的每个 8×8 块进行重复和交织。在使用渐进编码时，解开的像素块的顺序发生了改变。每个块值较高的数字会首先出现文件中（它给出了渐进式图像最早扫描到的不同阻塞），并且那些能增加出色细节的小数字（包括更多的 0），它们的跨度将更长，并一直持续到末位。图像数据的这种重新排序不会改变图像本身，而是增加了在一行中的可能存在的 0 的数量（这样可以更容易地压缩）。与由用户贡献的美味甜甜圈图像做比较（点击查看大图）：（1）标准 JPEG 格式图渲染的模拟（2）渐进式 JPEG 格式图渲染的模拟。Yelp 为用户生成的内容提供了两种图像格式 –  JPEG 和 PNG。JPEG 是一种很好的照片格式，但通常会与高对比度设计内容（如 logo）相结合。相比之下，PNG 是完全无损的，非常适合图形，但对于那些小失真不可见的照片来说占用的空间太大了。在用户上传实际照片是 PNG 格式的情况下，我们识别这些文件并将其另存为 JPEG 格式，可节省下大量的存储空间。Yelp 上一些常见的 PNG 照片来源于移动设备由和应用程序拍摄的截图，这些照片是通过添加特效或边框修饰了的。（左）一个典型的具有 logo 和边框的复合 PNG 格式的上传图。 （右）一个典型的来自于屏幕截图的 PNG 格式的上传图。我们想减少这些不必要的 PNG 格式的图片数量，但重要的是要避免矫枉过正或降低了 logo 和图形等的质量。我们应该如何区分出一张图片中属于照片的部分呢？从像素层面可以做到吗？使用了 2500 张图片作为实验样本后，我们发现文件大小和独特像素的结合可以很好地区分照片。我们用我们最大的分辨率生成候选缩略图，看看输出PNG文件是否大于 300 KiB。如果是，我们还将检查图像内容，查看是否有超过 2^16 种独特颜色（Yelp 将 RGBA 格式的上传图片转成 RGB 格式，但如果没这样做的话，我们也会检查）。在实验数据集中，那些手动调整阈值来定义成“ bigness ”占了有可能缩小的文件大小的 88％（即如果我们要转换所有图像，我们预期的文件大小的缩小），这是在不会导致转换后图形的任何假阳性的前提下进行的。缩小 JPEG 文件大小的第一个也是最为人所知的一种方式是称为质量的设置。许多能保存 JPEG 格式图片的应用程序会将质量指定为一个数字。质量这个词有点抽象。事实上，一幅 JPEG 格式的图像的每个颜色通道都有单独的质量。质量等级从 0 到 100 映射到颜色通道的不同量化表，取决于丢失了多少数据（通常是高频成分）。信号域中的量化是 JPEG 编码过程中丢失信息的步骤之一。减小文件大小的最简单的方法是降低图像的质量，这会引入更多的噪声。不是每张图片在一个给定的相同质量水平上都会丢失相同的信息量。我们可以为每张图片动态地选择一种质量优化设置，找到质量和存储大小之间的理想平衡。有两种方法可以做到这一点：我们评估了一种自下而上的算法，在实验中，在我们希望使用的质量范围的上限内没有产生合适的结果（尽管它似乎仍然具有中档图像质量的潜力， 这时编码器可以开始更冒险地去丢弃它的字节）。关于这一策略的众多学术论文在90年代初就有发表，该方法对计算能力要求很高，并且走了选项 B 地址这类的捷径，例如不评估块之间的交互。所以我们采取了第二种方法：使用对分的算法生成不同质量水平的候选图像，并通过使用 pyssim 函数来计算其结构相似性度量（SSIM），来评估每个候选图像的质量下降，直到该值处于可配置但阈值也还处于静态。这允许我们选择性地降低文件的平均大小（和平均质量），仅仅针对那些已经开始产生肉眼可识别的质量下降的图像。在下图中，我们绘制了用3种不同质量方法生成的 2500 张图像的SSIM值的表。1、用一种质量为 85 的初始方法作出原始图像，使用蓝线来绘制。3 种不同质量策略下 2500 张图片的 SSIM 值图有不少图像质量算法试图模仿人类视觉系统。我们已经评估过其中的许多算法，并认为 SSIM 虽然较为古老，但基于以下几个特征是最适合于迭代优化的：1、对 JPEG 量化误差敏感\n2、快速，简单的算法\n3、可以直接对 PIL 原生图像对象进行计算，而不是将图像转换为 PNG 格式并将其传递给 CLI 应用程序（参见＃2）动态质量的代码示例：还有一些关于这种技术的其他博客文章，这里是柯尔特·麦卡尼斯（Colt Mcanlis）的一篇博文。当我们发布这篇博客的时候，Etsy 已经发表了一篇了！击掌吧，更快的网络！Mozjpeg 是 libjpeg-turbo 的一个开源分支，它采取以时间换空间的方法，通过更长时间的运算换取更加优化的文件尺寸。这种方法很好地与离线批处理方法结合以重新生成图像。一些更昂贵的算法用了比 libjpeg-turbo 多出 3 – 5 倍的时间，使得图像更小了一些！mozjpeg 的区别之一是使用一种替代量化表。如上所述，质量是用于每个颜色通道的量化表的抽象。所有符号都指向默认的 JPEG 量化表，因而它很容易被击败。用这个词来说，:那么自然地，不要惊讶于你知道这些表是大多数编码器使用的默认值…Mozjpeg 经历了为我们的替代表做基准测试的麻烦时期，并在之后成为了它所创建的图像中，能用到的性能最好的通用替代品。大多数的 Linux 发行版都默认安装了 libjpeg。所以在 Pillow 下使用 mozjpeg 在默认情况下不起作用，但配置起来也不是很困难。当您构建 mozjpeg 时，请使用–with-jpeg8 标志位，并确保可以通过 Pillow 链接到它。如果您使用Docker，您可能会有一个 Dockerfile，如：以上！使用它，您将可以在正常图片工作流程中，使用由 mozjpeg 支持的 Pillow。这些改进中的每一项对我们的提升分别是多少呢？我们随机抽取 2,500 张 Yelp 上的商业照片开始了此项研究，测试照片大小在经过我们的处理流程后有怎样的变化。1、通过改变 Pillow 的设置，可以将图片大小减小 4.5%\n2、大型 PNG 格式图片检测可以将图片大小减小 6.2%\n3、动态质量可以将图片大小减小 4.5%\n4、切换到 mozjpeg 编码器可以将图片大小减小 13.8%这些改进使得图像文件的平均大小减少了约 30％，并被我们应用到我们最大和最常见的图像分辨率上，使网站能为用户提供更快速的服务，并且每天在数据传输上节省了 TB 级别的容量。按照 CDN 来衡量：从 CDN（结合非图像静态内容）测量的平均文件大小。本节旨在向您介绍可能能够做出的一些常见改进，有的是因为它们和 Yelp 使用的工具并无关系，有些是因为我们权衡后决定不做。子采样是决定网页图像的质量和文件大小的主要因素。对于子抽样的更详尽的描述可以在网上找到，但在这个博客文章我们只要说以 4：1：1（这是 Pillow 的默认值，没有指定任何其他内容）进行子采样就够了，所以我们无法了解能进一步缩小多少。在了解我们对 PNG 格式图片做了什么之后，用例如 pngmini 这样的有损编码器，选择将这些图片中一部分保留为 PNG 格式，可能是有意义的，但是我们选择将其重新保存成 JPEG 格式。这是一个结果看来合理的替代选项，根据作者的说法，未修改的 PNG 格式图片的文件大小缩小了 72-85 ％。为更多的现代化内容类型提供支持，如 WebP 或 JPEG2k 肯定是我们的未来要做的。而一旦这个假设的项目实行了，就会有大量的用户要求为现有已优化的 JPEG / PNG 图像做这些，这将继续使该项工作非常值得做。我们在网站上的许多地方使用 SVG，就像我们设计师创建的静态资产，这已成为我们的指导风格。虽然这种格式和优化工具（如 svgo）有助于减少网站页面的开销，但它与我们在这里所做的工作无关。能提供图像传送/调整大小/裁剪/转码服务的供应商太多，包括开源的 thumbor。也许这是支持响应式图像，动态内容类型的最简单方法，并且在将来仍然能让我们保持在技术前沿。而现在我们的解决方案仍然是独立的。这里列出的两本书在这个领域历史上是绝对能站稳脚跟的，强烈建议您进一步阅读这些书籍。", "title": "为提高用户体验，Yelp 是如何无损压缩图片的", "create_date": "\r\n\r\n            2017/09/12 ·  ", "tag": "IT技术.Yelp.图片压缩"},
{"content": "在基于数据库的一般应用中，查询的需求总要大于删除和修改。为了避免对于树形结构查询时的“”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。第一次看见这种表结构，相信大部分人都不清楚左值（Lft）和右值（Rgt）是如何计算出来的，而且这种表设计似乎并没有保存父子节点的继承关系。但当你用手指指着表中的数字从1数到18，你应该会发现点什么吧。对，你手指移动的顺序就是对这棵树进行前序遍历的顺序，如下图所示。当我们从根节点Food左侧开始，标记为1，并沿前序遍历的方向，依次在遍历的路径上标注数字，最后我们回到了根节点Food，并在右边写上了18。依据此设计，我们可以推断出所有左值大于2，并且右值小于11的节点都是Fruit的后续节点，整棵树的结构通过左值和右值存储了下来。然而，这还不够，我们的目的是能够对树进行CRUD操作，即需要构造出与之配套的相关算法。按照深度优先，由左到右的原则遍历整个树，从1开始给每个节点标注上left值和right值，并将这两个值存入对应的name之中。1、获取某个节点下的所有子孙节点，以Fruit为例：2、获取子孙节点总数子孙总数 = (右值–左值–1)/2，以Fruit为例，其子孙总数为：(11–2–1)/2 = 43、 获取节点在树中所处的层数，以Fruit为例：4、 获取当前节点所在路径，以Fruit为例：在日常的处理中我们经常还会遇到的需要获取某一个节点的直属上级、同级、直属下级。为了更好的描述层级关系，我们可以为Tree建立一个视图，添加一个层次列，该列数值可以编写一个自定义函数来计算：在添加完函数以后，我们创建一个a视图，添加新的层次列：5、 获取当前节点父节点,以Fruit为例：6、 获取所有直属子节点，以Fruit为例：7、 获取所有兄弟节点，以Fruit为例：8、 返回所有叶子节点上面已经介绍了如何检索结果，那么如何才能增加新的节点呢？Nested set 最重要是一定要有一个根节点作为所有节点的起点，而且通常这个节点是不被使用的。为了便于控制查询级别，在建表的时候建议添加parent_id配合之联结列表方式一起使用。添加子节点（子节点起始处），以在Food下添加子节点Fruit为例：如需在末尾追加就需要以下方式进行（以在Red下添加Apple为例）：在节点A后面添加同级节点（以在Yellow后面添加Green为例）以上讨论的添加节点指的都是添加末端节点，即插入的这个节点不是当前已存在节点的父节点。如果需要插入非末端节点要怎么办呢？这个过程可以将流程分为2步，首先新增节点，接下里再将需要的节点移到新增的节点下级。节点移动方法(以将Apple移到Yellow中为例)：如果需要只删除该节点，子节点自动上移一级如何处理？以上为Nested Set的CURD操作，具体在使用时建议结合事务和存储过程一起使用。本方案的优点时查询非常的方便，缺点就是每次插入删除数据涉及到的更新内容太多，如果树非常大，插入一条数据可能花很长的时间。参考链接：", "title": "树形结构数据存储方案（四）：左右值编码", "create_date": "\r\n\r\n            2017/09/02 ·  ", "tag": "IT技术.数据库"},
{"content": "1、 跳转,Meld 是 Linux 上功能丰富的可视化比较和合并工具。如果你是第一次接触，你可以进入我们的，了解该程序的工作原理，如果你已经阅读过或正在使用 Meld 进行基本的比较/合并任务，你将很高兴了解本教程的东西，在本教程中，我们将讨论一些非常有用的技巧，这将让你使用工具的体验更好。。你可能已经知道（我们也在初学者指南中也提到过这一点），标准滚动不是在使用 Meld 时在更改之间跳转的唯一方法 – 你可以使用向上和向下箭头键轻松地从一个更改跳转到另一个更改位于编辑区域上方的窗格中：但是，这需要你将鼠标指针移动到这些箭头，然后再次单击其中一个（取决于你要去哪里 – 向上或向下）。你会很高兴知道，存在另一种更简单的方式来跳转：只需使用鼠标的滚轮即可在鼠标指针位于中央更改栏上时进行滚动。这样，你就可以在视线不离开或者分心的情况下进行跳转，看下上一节的最后一个屏幕截图。你知道那些黑箭头做什么吧？默认情况下，它们允许你执行合并/更改操作 – 当没有冲突时进行合并，并在同一行发生冲突时进行更改。但是你知道你可以根据需要删除个别的更改么？是的，这是可能的。为此，你需要做的是在处理更改时按下 Shift 键。你会观察到箭头被变成了十字架。只需点击其中任何一个，相应的更改将被删除。不仅是删除，你还可以确保冲突的更改不会在合并时更改行。例如，以下是一个冲突变化的例子：现在，如果你点击任意两个黑色箭头，箭头指向的行将被改变，并且将变得与其他文件的相应行相似。只要你想这样做，这是没问题的。但是，如果你不想要更改任何行呢？相反，目的是将更改的行在相应行的上方或下方插入到其他文件中。我想说的是，例如，在上面的截图中，需要在 “test23” 之上或之下添加 “test 2”，而不是将 “test23” 更改为 “test2”。你会很高兴知道在 Meld 中这是可能的。就像你按下 Shift 键删除注释一样，在这种情况下，你必须按下 Ctrl 键。你会观察到当前操作将被更改为插入 – 双箭头图标将确认这一点 。从箭头的方向看，此操作可帮助用户将当前更改插入到其他文件中的相应更改 (如所选择的)。有时候，你希望 Meld 的编辑区域中的文字大小变大（为了更好或更舒适的浏览），或者你希望文本行被包含而不是脱离视觉区域（意味着你不要想使用底部的水平滚动条）。Meld 在  选项卡（）的  菜单中提供了一些显示和字体相关的自定义选项，你可以进行这些调整：在这里你可以看到，默认情况下，Meld 使用系统定义的字体宽度。只需取消选中  类别下的框，你将有大量的字体类型和大小选项可供选择。然后在  部分，你将看到我们正在讨论的所有自定义选项：你可以设置 Tab 宽度、告诉工具是否插入空格而不是 tab、启用/禁用文本换行、使Meld显示行号和空白（在某些情况下非常有用）以及使用语法突出显示。有时候，并不是所有的修改都是对你很重要的。例如，在比较两个 C 编程文件时，你可能不希望 Meld 显示注释中的更改，因为你只想专注于与代码相关的更改。因此，在这种情况下，你可以告诉 Meld 过滤（或忽略）与注释相关的更改。例如，这里是 Meld 中的一个比较，其中由工具高亮了注释相关更改：而在这种情况下，Meld 忽略了相同的变化，仅关注与代码相关的变更：很酷，不是吗？那么这是怎么回事？为此，我是在 “” 标签中启用了 “C comments” 文本过滤器：如你所见，除了 “C comments” 之外，你还可以过滤掉 C++ 注释、脚本注释、引导或所有的空格等。此外，你还可以为你处理的任何特定情况定义自定义文本过滤器。例如，如果你正在处理日志文件，并且不希望 Meld 高亮显示特定模式开头的行中的更改，则可以为该情况定义自定义文本过滤器。但是，请记住，要定义一个新的文本过滤器，你需要了解 Python 语言以及如何使用该语言创建正则表达式。这里讨论的所有四个技巧都不是很难理解和使用（当然，除了你想立即创建自定义文本过滤器），一旦你开始使用它们，你会认为他们是真的有好处。这里的关键是要继续练习，否则你学到的任何技巧不久后都会忘记。你还知道或者使用其他任何中级 Meld 的贴士和技巧么？如果有的话，欢迎你在下面的评论中分享。", "title": "给中级 Meld 用户的实用技巧", "create_date": "\r\n\r\n            2017/09/03 ·  ", "tag": "IT技术.Linux"},
{"content": "前面的一篇文章介绍了，不知道大家注意到了没有，如果数据庞大，每次更新都需要更新差不多全表，效率较低没有更好的方式？今天我们就来研究下区间嵌套法。如果节点区间[clft, crgt]与[plft, prgt]存在如下关系：plft <= clft and crgt >= prgt，则[clft, crgt]区间里的点是[plft, prgt]的子节点。基于此假设我们就可以通过对区间的不断的向下划来获取新的区间。举例：如果在区间[plft, prgt]中存在一个空白区间[lft1, rgt1]，如果要加入一个[plft,lft1]、[rgt1,prgt]同级的区间，只需插入节点：[(2*lft1+rgt1)/3,  (rgt1+2*lft)/3]。在添加完节点后我们还留下[lft1,(2*lft1+rgt1)/3]和 [(rgt1+2*lft)/3,rgt1]两个空余的空间用来添加更多的子节点。如果我们把区间放在二位平面上，把rgt当成是x轴，lft当做是y轴，纳闷嵌套的区间数差不多是这样的：每个节点[lft, rgt]拥有的子节点都被包含在y >= lft & x <= rgt中。同时y >= clft & x <= crgt所在的空间也是y >= plft  & x <= prgt的子集。另外由于新增的右区间都小于已有的左区间，所以新增的节点均在y=x这条直线以下。了解了区间嵌套法的原理后，接下来我们就要考虑如何实现他，原则上初始的区间使用任何区间都是可以的，这里我们使用的是[0,1]作为根区间。首先，我们在XY平面上定义2个点。深度优先集合点和广度有限集合点，针对点<x=1,y=1/2>的深度优先集合点为<x=1,y=1>，广度优先集合点为<x=1/2,y=1/2>。接下来我们定义第一个子节点的位置为父节点和深度优先集合点的中间点。兄弟节点则为前一个子节点到广度优先集合点的中间点，如上图所示，节点1.2的位置为<x=3/4, y=5/8>。另外仔细看我们可以看到点与点之间的关系。另外如果我们知道x和y的和，我们就能反推出x,y的值（具体的逻辑是什么，我现在也还没有搞懂，有知道的朋友可以帮忙解释下）。我们以节点<x=3/4, y=5/8>为例，我们可以得到他的和为11/8。我们定义11为分子（numerator），8为分母（denominator），则x点的分子为：x点的分母为：Y点的分子:Y 的分母：接下来我们来测试下，X与Y是否能解码出来：结果与节点1.2的位置为<x=3/4, y=5/8>完全一致。现在我们知道只需要一个分数即可表示平面上的一个点。如有已经有分数11/8如何获取该节点的父节点？(如果分子为3，则代表其为根节点)计算当前节点在同级所在的位置：有了查询父节点的方法及当前节点所在同级中的位置的方法，即可通过这两个的组合，将节点的路径给计算出来。按照以上方法添加后进行测试，返回[Err] 1424 – Recursive stored functions and triggers are not allowed. 即MySQL的自定义函数不支持递归查询。SELECT path (11, 8) 的结果为 1.2计算节点层级的方法：我们知道了如何将编码过的节点转成目录形式，如何逆转呢？以下是方法：先添加2个辅助函数：再来编写逆转函数：select CONCAT(path_numer(‘2.1.3′),’/’,path_denom(‘2.1.3’)) 结果为51/64参考资料：", "title": "树形结构数据存储方案（五）：区间嵌套", "create_date": "\r\n\r\n            2017/09/03 ·  ", "tag": "IT技术.数据库"},
{"content": "代码实现,最近因业务需要，研究了一下树数据结果的存储及查询解决方案。 最初的想法是使用neo4j,可是在网上看了一下开源的不支持集群，感觉用的人不多。网上也查了一些  但每种实现方案都有它的一定局限性。想了一短时间后，想出了下面的方案：一、 因为复杂的查询都由Redis来处理，所以数据库表的设计就变得非常简单：tree 表| 字段名称 | 数据类型 | 备注说明 | | —- | —- | —- | | id | int | 主键 | | parent_id | int | 上级节点ID |二、Redis的数据存储方案：把表的数据存储到一个Hash表中，使用表中的id值做为此hash表的key, value值为：为了简化测试，这里只演示Redis相关的操作在Lua中使用递归时，需要使用“尾调用”来优化代码。关于尾调用的知识，大家可以上网去搜索。以上代码因为使用了“尾调用”，所以变得相对比较复杂此方案相对比较灵活，能支持相对比较大量的数据。缺点：过于依赖Redis。数据同步会麻烦些，好在操作不是很复杂。", "title": "使用 Redis 解决“树”形数据的复杂查询", "create_date": "\r\n\r\n            2017/09/04 ·  ", "tag": "IT技术.Redis.数据库"}
]